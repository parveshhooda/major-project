/*************************************************************************************************/
/*************************************SOFTWARE SERIAL *******************************************/
#include <SoftwareSerial.h>
SoftwareSerial mySerial(3,4);

/**************************************FINGERPRINT INITIALIZATION*********************************/
#include <Adafruit_Fingerprint.h>
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
uint8_t id;

/*************************************************************************************************/
/**************************************GPS INITIALIZATION*****************************************/
#include <TinyGPS.h>
TinyGPS gps;


#define Switch A0                  //1ST SWITCH CONNECTED TO ARDUINO A0
#define Switchh A1                 //2ND SWITCH CONNECTED TO ARDUINO A1

//MOTOR CONNECTED TO ARDUINO 9&10TH PINS
#define Motor 9                    
#define Motor1 10

/************************************************************************************************************/
/********************************RPM CALCULATION VARIABLES INTIALIZATION*************************************/
//IR SENSOR OUT PIN CONNECTED TO ARDUINO 2ND PIN
float lat ,lon ;
float value=0;
float rev=0;
int rpm;
int oldtime=0;
int time;
int count=0;

/**************************************************************************************************************/
/************************************RPM-INTERRUPT***************************************/
void isr()
{
rev++;
}

void setup() 
{
 Serial.begin(9600);
 finger.begin(57600); 
// gpsSerial.begin(9600);
 attachInterrupt(0,isr,RISING);
 
 pinMode(Switch,OUTPUT);
 pinMode(Switchh,OUTPUT);
 pinMode(Motor,OUTPUT);
 pinMode(Motor1,OUTPUT);
 
 Serial.println("--------------FINGERPRINT-----------------");

 if (finger.verifyPassword()) 
  {
    Serial.println("Found fingerprint sensor!!!!!");
  } 
 else 
  {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) 
    { 
      delay(1);
    }
  }
}

uint8_t readnumber(void) 
{
  uint8_t num = 0; 
  while (num == 0) 
  {
    while (! Serial.available());
    num = Serial.parseInt();
  }
  return num;
} 


void loop() 
{
  if(Serial.available())
  { 
      if(gps.encode(Serial.read()))
    {  
      gps.f_get_position(&lat,&lon);
    }
  }
  if(digitalRead(Switch)==HIGH)
  {
     while(digitalRead(Switch)==HIGH);
     Serial.println("Ready to enroll a fingerprint!");
     Serial.println("Please type in the ID # (from 1 to 127) you want to save this finger as...");
     id = readnumber();
  if (id == 0) 
  {
     return;
  }
  Serial.print("Enrolling ID #");
  Serial.println(id);
  
  while (!getFingerprintEnroll() );
  }
   
if(digitalRead(Switchh)==HIGH)
  {
     while(digitalRead(Switchh)==HIGH);
     Serial.println("Waiting for valid finger...");
     delay(10000);
     getFingerprintIDez();
     delay(50);
  }
 if(count==1)
  {
    digitalWrite(Motor,HIGH);
    digitalWrite(Motor1,LOW);
    delay(1000);
          detachInterrupt(0);           
          time=millis()-oldtime;        
          rpm=(rev/time)*60000;         
          oldtime=millis();             
          rev=0;
          Serial.print(rpm);
          Serial.println(" RPM");
          attachInterrupt(0,isr,RISING); 
          delay(1000);
            Serial.println("*****The GPS Received Signal*****");       
            Serial.print("Position:          "); 
            Serial.print("Latitude:"); 
            Serial.print(lat,6); 
            Serial.print(";    "); 
            Serial.print("Longitude:"); 
            Serial.println(lon,6);  
            delay(1000);

          
  }
 }  
 
uint8_t getFingerprintID() 
{
  uint8_t p = finger.getImage();
  switch (p) 
  {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) 
  {
    Serial.println("Found a print match!");
  } 
  else if (p == FINGERPRINT_PACKETRECIEVEERR) 
  {
    Serial.println("Communication error");
    return p;
  } 
  else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } 
  else 
  {
    Serial.println("Unknown error");
    return p;
  }   
 
  Serial.print("Found ID #"); 
  Serial.print(finger.fingerID); 
  Serial.print(" with confidence of ");
  Serial.println(finger.confidence); 
  return finger.fingerID;
  
 }

int getFingerprintIDez() 
{
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;
  
  
  Serial.print("Found ID #"); 
  Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); 
  Serial.println(finger.confidence);
  count=1;
  Serial.println("-------TACHOMETER AND GPS--------");
  return count;
  return finger.fingerID;
   
}
uint8_t getFingerprintEnroll() 
{
  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
  while (p != FINGERPRINT_OK) 
  {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }
  p = finger.image2Tz(1);
  switch (p) 
  {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  Serial.println("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) 
  {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  Serial.println("Place same finger again");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) 
    {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }
  p = finger.image2Tz(2);
  switch (p) 
  {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  Serial.print("Creating model for #");  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) 
  {
    Serial.println("Prints matched!");
  } 
  else if (p == FINGERPRINT_PACKETRECIEVEERR) 
  {
    Serial.println("Communication error");
    return p;
  } 
  else if (p == FINGERPRINT_ENROLLMISMATCH) 
  {
    Serial.println("Fingerprints did not match");
    return p;
  } 
  else 
  {
    Serial.println("Unknown error");
    return p;
  }   
  
  Serial.print("ID "); 
  Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) 
  {
    Serial.println("Stored!");
  } 
  else if (p == FINGERPRINT_PACKETRECIEVEERR) 
  {
    Serial.println("Communication error");
    return p;
  } 
  else if (p == FINGERPRINT_BADLOCATION) 
  {
    Serial.println("Could not store in that location");
    return p;
  } 
  else if (p == FINGERPRINT_FLASHERR) 
  {
    Serial.println("Error writing to flash");
    return p;
  } 
  else 
  {
    Serial.println("Unknown error");
    return p;
  }   
} 
